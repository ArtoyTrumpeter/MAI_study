Параллельная работа с файлом.

MPI_File_open - открытие файла
MPI_File_set_view - определяет не только offset в файле для процессов, но также задаёт тип файла,
                                а именно шаблон записи в файл, т. е. шаблон расположения данных
MPI_File_read, MPI_File_write - чтение и записть из/в файл(а)
MPI_File_close - закрытие файла

В MPI можно передавать структуры, а не только примитивные типы данных.

Для этого можно:
1) передавать побайтово
2) создать свой тип данных

Производный тип данных в MPI -задаётся с помощью карты типа.
Это множество/последовательность из пар, 
где 1 - тип элемента
    2 - смещение элемента

Есть разные способы конструирования типов:
1) Непрерывный - для того, чтобы передавать массивы как таковые
MPI_Type_contiguous()
2) Векторный - можно задавать некоторое смещение между блоками
MPI_Type_(h)vector()
MPI_Type_create_subarray()
----------------------------------------------------------------------------------------------------------------------
3) Индексный - то же что и векторный, но промежутки между блоками могут быть неравномерными
MPI_Type_(h)indexed(int count, int blocklens[], MPI Aint indices[], MPI_Data_type oldtype, MPI_Datatype *newtype), где
count - кол-во блоков
blocklens[] - кол-во элементов в каждом блоке
indices - смещение каждого блока от начала типа (интервалы между блоками в байтах, поэтому hindexed)
oldtype - исходный тип данных
newtype - новый определяемый тип данных
----------------------------------------------------------------------------------------------------------------------
4) Структурный - общее описание производного типа через явное указание карты типа

После создания нового типа данных его надо зарегистрировать в MPI:
MPI_Type_commit()
MPI_Type_free() - в конце аннулируем этот тип 