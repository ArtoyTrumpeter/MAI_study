 Ray Tracing - используется для создания фотореалистичных изображений.

Алгоритм тяжёлый и хорошо параллелится.

Берём луч из каждого пикселя и вычисляем его отражение, преломление и взаимодействие с объектами на сцене, освещенность

Эффект зубчатости при трассировке устраняется с помощью сглаживания SSAA.

Входные данные: sqrt из количества лучей на один пиксель - 
во сколько раз больше изображение надо будет рендерить для SSAA

Это с рекурсией:
for i = 1...depth_recursive
    a = [] - массив лучей
    kernel(a, out)
    len(out) = 2 * len(a)
    a = compact(out) - убирает разреженность в массиве


Два подхода к созданию трёхмерных изображений:
Растеризация - прямая проекция геометрии  Буфер глубины - для решения пролемы прозрачности
                                          в него записывается расстояние от точки до камеры 
                                          и если какой-то пиксель ближе то перекашиваем его 
Трассировка лучей - обратная проекция пикселей изображения 
    В камеру: Нужно много лучей, мало из них попадёт в камеру, расточительно
    Из камеры: Экран покрывается равномерно, мало фиктивных лучей, более быстро и экономично

Поверхность задана как массив треугольников
Узкое место - поиск пересечения луча с поверхностью, т.к. полигонов очень много (> 1000000 треугольников, >10^12 операций)
Пересечение луча и треугольника: Самый простой вариант: есть уравнение луча Ax + By + Cz + D = 0
                                 найти t: x = p.x + v.x * t
                                          y = p.y + v.y * t
                                          z = p.z + v.z * t
                                       
                                            (A * p.x + B * p.y + C * p.z + D)
                                       t = -----------------------------------
                                              A * v.x + B * v.y + C * v.z


                                     
